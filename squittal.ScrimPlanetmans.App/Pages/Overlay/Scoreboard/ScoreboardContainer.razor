@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using squittal.ScrimPlanetmans.Models;
@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.Planetside;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;

@inject IScrimMatchEngine ScrimMatchEngine
@inject IScrimTeamsManager ScrimTeamsManager
@inject IScrimMessageBroadcastService MessageService
@inject IFactionService FactionService

@implements IDisposable

<div class="scoreboard">
    <div class="outfitScoresContainer">
        <ScoreboardBaseCaptures i_captureCount=_teamControls1 i_factionId=_teamFactionId1 i_teamOrdinal=1 />
        <div class="outfitScoresRow team1 @SqCssHelper.GetFactionClassFromId(_teamFactionId1)">
            <div class="outfitAlias">@_teamAlias1</div><div class="outfitScore @_hidePointsClass">@_teamPointsDisplay1</div><div class="wedge"></div><div class="factionLabel">@_teamFactionDisplay1[0]<br />@_teamFactionDisplay1[1]</div><div class="pointProgressContainer @(GetShowPointTargetCssClass(_shouldShowPointTarget))"><div class="pointProgressBar" style="transform: @(_teamPointBarTransform1);"></div></div> 
        </div><div class="timerContainer">
            @*@if (_shouldShowMatchTimer && !_shouldShowPointTarget)
            { 
                <div class="timer-text"><MatchTimer /></div>
            }
            else if (!_shouldShowMatchTimer && _shouldShowPointTarget && _pointTarget.HasValue)
            {
                <div style="margin-top: 1px; font-size: 14px; margin-left: 6px; margin-right: 6px;">First to<br />@(_pointTarget.Value)</div>
            }
            else if (_shouldShowMatchTimer && _shouldShowPointTarget && _pointTarget.HasValue)
            {
              <div class="timer-text" style="font-size: 16px;"><MatchTimer /></div><div style="margin-top: 1px; font-size: 12px; margin-left: 6px; margin-right: 6px;">First to @(_pointTarget.Value)</div>
            }
            else
            {
                <div class="timer-text"><MatchTimer /></div>
            }*@
            @if (_shouldShowPointTarget && _pointTarget.HasValue)
            {
              <div class="timer-text" style="font-size: 16px;"><MatchTimer /></div><div style="margin-top: 1px; font-size: 12px; margin-left: 6px; margin-right: 6px;">First to @(_pointTarget.Value)</div>
            }
            else
            {
                <div class="timer-text"><MatchTimer /></div>
            }
        </div><div class="outfitScoresRow team2 @SqCssHelper.GetFactionClassFromId(_teamFactionId2)">
            <div class="factionLabel">@_teamFactionDisplay2[0]<br />@_teamFactionDisplay2[1]</div><div class="wedge"></div><div class="outfitScore @_hidePointsClass">@_teamPointsDisplay2</div><div class="outfitAlias">@_teamAlias2</div><div class="pointProgressContainer @(GetShowPointTargetCssClass(_shouldShowPointTarget))"><div class="pointProgressBar" style="transform: @(_teamPointBarTransform2);"></div></div> 
        </div>
        <ScoreboardBaseCaptures i_captureCount=_teamControls2 i_factionId=_teamFactionId2 i_teamOrdinal=2 />
    </div>

    <div class="series-tally-container" style="@(GetSeriesTallyMarginString())">
        <div class="team team1 @SqCssHelper.GetFactionClassFromId(_teamFactionId1)">
            @foreach (var matchResult in _teamSeriesResults1)
            {
                <div class="tally @GetSeriesMatchTallyCssClass(matchResult.ResultType)"></div>
            }
            @if (ShouldShowActiveSeriesTally())
            {
                <div class="tally @GetSeriesMatchTallyCssClass(null)"></div>
            }

        </div>

        <div class="team team2 @SqCssHelper.GetFactionClassFromId(_teamFactionId2)">
            @foreach (var matchResult in _teamSeriesResults2)
            {
                <div class="tally @GetSeriesMatchTallyCssClass(matchResult.ResultType)"></div>
            }
            @if (ShouldShowActiveSeriesTally())
            {
                <div class="tally @GetSeriesMatchTallyCssClass(null)"></div>
            }

        </div>

        @*<div style="grid-area: blank; background-color: var(--sq-ov-semantic-orange); height: 6px; margin: auto 0; border: 1px solid var(--sq-yellow);"></div>*@
        @*<div style="grid-area: blank;">
            <div style=" background-color: var(--sq-ov-semantic-orange); height: 6px; margin: auto 0; border: 1px solid var(--sq-yellow); transform-origin: center center; animation: 7s linear 0s infinite reverse forwards respawnIn;"></div>
            <div class="capture-flag-container" style="background-color: var(--sq-ov-semantic-orange); border-radius: 2rem; width: 17px; height: 16px; position: relative; top: -11px; border: 1px solid var(--sq-yellow); animation: 1s ease-out infinite normal forwards periodicControlTickFlash;">
                <span class="iconify capture-flag" data-icon="ion:flag" data-inline="false" style="color: var(--sq-ov-bg-dark-gray-alpha-90); font-size: 12px; filter: none; margin-top: -10px; margin-left: 1px;"></span>
            </div>
        </div>*@
        @*<PeriodControlTickProgressBar MatchState="_matchState" SecondsPerTick="_periodicPointsInterval" PointsPerTick="@_periodicPointsValue"/>*@
        @if(_isPeriodPointsEnabled)
        { 
            <PeriodControlTickProgressBar />
        }

        <!--<div class="periodic-control-progress-container">-->
            @*<div style=" background-color: var(--sq-ov-semantic-orange); height: 5px; /*! margin: auto 0; */ /*! border: 1px solid var(--sq-yellow); */ transform-origin: center right; animation: 7s linear 0s infinite reverse forwards pointControlTickProgressLeft;width: 50%;display: inline-block;background: linear-gradient(90deg, #fff0 0%, rgba(248,194,117, 0.25) 2.5%, rgba(248,194,117, 0.5) 5%, rgba(248,194,117, 0.8) 10%, rgba(248,194,117, 0.9) 100%);border-bottom: 1px solid #F8BA0FA0;position: relative;top: -11px;"></div>*@
            @*<div style=" background-color: var(--sq-ov-semantic-orange); height: 5px; /*! margin: auto 0; */ /*! border: 1px solid var(--sq-yellow); */ transform-origin: center left; animation: 7s linear 0s infinite reverse forwards pointControlTickProgressRight;width: 50%;display: inline-block;background: linear-gradient(-90deg, #fff0 0%, rgba(248,194,117, 0.25) 2.5%, rgba(248,194,117, 0.5) 5%, rgba(248,194,117, 0.8) 10%, rgba(248,194,117, 0.9) 100%);border-bottom: 1px solid #F8BA0FA0;position: relative;top: -11px;"></div>*@
            <!--<div class="tick-bar left"></div><div class="tick-bar right"></div>
            <div style="width: 0; height: 0; position: relative; left: calc(50% - 8px); top: -16px;">
                <div class="capture-flag-container nc" style="border-radius: 2rem; width: 17px; height: 16px; position: relative; top: -12px; position: relative;" >
                    <span class="iconify capture-flag" data-icon="ion:flag" data-inline="false" style="color: var(--sq-ov-bg-dark-gray-alpha-90); font-size: 12px; filter: drop-shadow(-1px 0px 1px var(--sq-black)); margin-top: -10px; margin-left: 1px; color: var(--sq-ov-ps2-primary);"></span>
                </div>
            </div>
        </div>-->

    </div>

</div>

@code {
    //[Parameter]
    //public bool i_showFeed { get; set; } = true;

    //private bool _showFeed { get; set; } = true;

    [Parameter]
    public bool i_CurrentRoundOnly { get; set; }
    private bool _renderedCurrentRoundOnly { get; set; } = false;

    private string _noPointsString = "-"; //"_"

    private string _teamAlias1 { get; set; }
    private int _teamPoints1 { get; set; } = 0;
    //private string _teamPointsDisplay1 { get; set; }
    private string _teamPointsDisplay1 => _shouldShowPoints ? _teamPoints1.ToString() : _noPointsString;
    private int? _teamFactionId1 { get; set; }
    private string[] _teamFactionDisplay1 { get; set; } = new string[2] { ".", "." };
    private int _teamControls1 { get; set; } = 0;
    private List<ScrimSeriesMatchResult> _teamSeriesResults1 { get; set; } = new List<ScrimSeriesMatchResult>();

    private string _teamAlias2 { get; set; }
    private int _teamPoints2 { get; set; } = 0;
    //private string _teamPointsDisplay2 { get; set; }
    private string _teamPointsDisplay2 => _shouldShowPoints ? _teamPoints2.ToString() : _noPointsString;
    private int? _teamFactionId2 { get; set; }
    private string[] _teamFactionDisplay2 { get; set; } = new string[2] { ".", "." };
    private int _teamControls2 { get; set; } = 0;
    private List<ScrimSeriesMatchResult> _teamSeriesResults2 { get; set; } = new List<ScrimSeriesMatchResult>();

    private MatchState _matchState { get; set; }
    private int _currentRound { get; set; }

    //private bool _shouldShowPoints { get; set; } = false;
    private bool _shouldShowPoints => (_matchState == MatchState.Uninitialized) ? false : true;
    private string _hidePointsClass => _shouldShowPoints ? "" : "hidePoints";

    private int? _pointTarget { get; set; }
    private bool _shouldShowPointTarget { get; set; } = false;
    private bool _shouldShowMatchTimer { get; set; } = false;

    private bool _isPeriodPointsEnabled { get; set; } = false;
    private int _periodicPointsInterval { get; set; }
    private int _periodicPointsValue { get; set; }

    private string _teamPointBarTransform1 { get; set; } = "scaleX(0)";
    private string _teamPointBarTransform2 { get; set; } = "scaleX(0)";

    #region Initialization Methods
    protected override void OnInitialized()
    {
        MessageService.RaiseTeamAliasChangeEvent += ReceiveTeamAliasChangeEvent;
        MessageService.RaiseTeamFactionChangeEvent += ReceiveTeamFactionChangeEvent;
        MessageService.RaiseMatchStateUpdateEvent += ReceiveMatchStateUpdateEvent;
        MessageService.RaiseTeamStatUpdateEvent += ReceiveTeamStatUpdateEvent;

        MessageService.RaiseScrimFacilityControlActionEvent += ReceiveFacilityControlEvent;

        _renderedCurrentRoundOnly = i_CurrentRoundOnly;

        SyncMatchAndTeamState();

        //_teamAlias1 = ScrimTeamsManager.GetTeamAliasDisplay(1);

        //var teamPoints1 = _renderedCurrentRoundOnly
        //                    ? ScrimTeamsManager.GetTeamCurrentRoundScoreDisplay(1)
        //                    : ScrimTeamsManager.GetTeamScoreDisplay(1);

        //_teamPoints1 = (teamPoints1 == null) ? 0 : (int)teamPoints1;

        //_teamFactionId1 = ScrimTeamsManager.GetTeam(1).FactionId;

        //_teamAlias2 = ScrimTeamsManager.GetTeamAliasDisplay(2);
        //var teamPoints2 = _renderedCurrentRoundOnly
        //                    ? ScrimTeamsManager.GetTeamCurrentRoundScoreDisplay(2)
        //                    : ScrimTeamsManager.GetTeamScoreDisplay(2);

        //_teamPoints2 = (teamPoints2 == null) ? 0 : (int)teamPoints2;

        //_teamFactionId2 = ScrimTeamsManager.GetTeam(2).FactionId;

        //UpdateSeriesMatchResults();

        //_matchState = ScrimMatchEngine.GetMatchState();
        //_currentRound = ScrimMatchEngine.GetCurrentRound();

        //UpdateTeamsControlCounts();

        //UpdateShouldShowPoints();

        //UpdatePointsDisplay();

        //if (_teamFactionId1 == null)
        //{
        //    UpdateTeamFactionDisplay(1, string.Empty);
        //}
        //else
        //{
        //    UpdateTeamFactionDisplay(1, FactionService.GetFactionAbbrevFromId((int)_teamFactionId1));
        //}

        //if (_teamFactionId2 == null)
        //{
        //    UpdateTeamFactionDisplay(2, string.Empty);
        //}
        //else
        //{
        //    UpdateTeamFactionDisplay(2, FactionService.GetFactionAbbrevFromId((int)_teamFactionId2));
        //}
    }

    public void Dispose()
    {
        MessageService.RaiseTeamAliasChangeEvent -= ReceiveTeamAliasChangeEvent;
        MessageService.RaiseTeamFactionChangeEvent -= ReceiveTeamFactionChangeEvent;
        MessageService.RaiseMatchStateUpdateEvent -= ReceiveMatchStateUpdateEvent;
        MessageService.RaiseTeamStatUpdateEvent -= ReceiveTeamStatUpdateEvent;

        MessageService.RaiseScrimFacilityControlActionEvent -= ReceiveFacilityControlEvent;
    }

    protected override void OnParametersSet()
    {
        if (_renderedCurrentRoundOnly != i_CurrentRoundOnly)
        {
            _renderedCurrentRoundOnly = i_CurrentRoundOnly;
            _currentRound = ScrimMatchEngine.GetCurrentRound();

            SyncMatchAndTeamState();

            InvokeAsyncStateHasChanged();
        }
    }

    private void SyncMatchAndTeamState()
    {
        _matchState = ScrimMatchEngine.GetMatchState();
        _currentRound = ScrimMatchEngine.GetCurrentRound();
        _shouldShowPointTarget = ScrimMatchEngine.MatchConfiguration.EndRoundOnPointValueReached;
        _shouldShowMatchTimer = ScrimMatchEngine.MatchConfiguration.EnableRoundTimeLimit;

        _isPeriodPointsEnabled = ScrimMatchEngine.MatchConfiguration.EnablePeriodicFacilityControlRewards;
        _periodicPointsInterval = ScrimMatchEngine.MatchConfiguration.PeriodicFacilityControlIntervalNonNullable;
        _periodicPointsValue = ScrimMatchEngine.MatchConfiguration.PeriodicFacilityControlPointsNonNullable;

        _teamAlias1 = ScrimTeamsManager.GetTeamAliasDisplay(1);
        _teamAlias2 = ScrimTeamsManager.GetTeamAliasDisplay(2);

        UpdateTeamPoints();

        //int? teamPoints1;
        //int? teamPoints2;

        //if (_renderedCurrentRoundOnly)
        //{
        //    teamPoints1 = ScrimTeamsManager.GetTeamCurrentRoundScoreDisplay(1);
        //    teamPoints2 = ScrimTeamsManager.GetTeamCurrentRoundScoreDisplay(2);
        //}
        //else
        //{
        //    teamPoints1 = ScrimTeamsManager.GetTeamScoreDisplay(1);
        //    teamPoints2 = ScrimTeamsManager.GetTeamScoreDisplay(2);
        //}

        //_teamPoints1 = (teamPoints1 == null) ? 0 : teamPoints1.Value;
        //_teamPoints2 = (teamPoints2 == null) ? 0 : teamPoints2.Value;


        //UpdateShouldShowPoints();

        //UpdatePointsDisplay();

        UpdateTeamsControlCounts();

        UpdateSeriesMatchResults();

        _teamFactionId1 = ScrimTeamsManager.GetTeam(1).FactionId;
        _teamFactionId2 = ScrimTeamsManager.GetTeam(2).FactionId;

        if (_teamFactionId1 == null)
        {
            UpdateTeamFactionDisplay(1, string.Empty);
        }
        else
        {
            UpdateTeamFactionDisplay(1, FactionService.GetFactionAbbrevFromId((int)_teamFactionId1));
        }

        if (_teamFactionId2 == null)
        {
            UpdateTeamFactionDisplay(2, string.Empty);
        }
        else
        {
            UpdateTeamFactionDisplay(2, FactionService.GetFactionAbbrevFromId((int)_teamFactionId2));
        }
    }

    #endregion Initialization Methods

    private void UpdateMatchState()
    {
        _matchState = ScrimMatchEngine.GetMatchState();
        _currentRound = ScrimMatchEngine.GetCurrentRound();

        //UpdateShouldShowPoints();
    }

    private void UpdateTeamPoints()
    {
        int? teamPoints1;
        int? teamPoints2;

        if (_renderedCurrentRoundOnly)
        {
            _currentRound = ScrimMatchEngine.GetCurrentRound();

            //teamPoints1 = ScrimTeamsManager.GetTeamRoundScoreDisplay(1, _currentRound);
            //teamPoints2 = ScrimTeamsManager.GetTeamRoundScoreDisplay(2, _currentRound);

            //teamPoints1 = ScrimTeamsManager.GetTeamCurrentRoundScoreDisplay(1);
            //teamPoints2 = ScrimTeamsManager.GetTeamCurrentRoundScoreDisplay(2);

            teamPoints1 = GetCurrentRoundTeamPoints(1, _currentRound);
            teamPoints2 = GetCurrentRoundTeamPoints(2, _currentRound);
        }
        else
        {
            teamPoints1 = ScrimTeamsManager.GetTeamScoreDisplay(1);
            teamPoints2 = ScrimTeamsManager.GetTeamScoreDisplay(2);
        }

        _teamPoints1 = (teamPoints1 == null) ? 0 : teamPoints1.Value;
        _teamPoints2 = (teamPoints2 == null) ? 0 : teamPoints2.Value;

        _shouldShowPointTarget = ScrimMatchEngine.MatchConfiguration.EndRoundOnPointValueReached;
        var pointTarget = ScrimMatchEngine.MatchConfiguration.TargetPointValue;

        //Console.WriteLine($"ScoreboardOverlay: TargetPointValue = {pointTarget}");
        //Console.WriteLine($"ScoreboardOverlay: _shouldShowPointTarget = {_shouldShowPointTarget}");

        if (_shouldShowPointTarget && pointTarget.HasValue)
        {
            _pointTarget = pointTarget.Value;
            _teamPointBarTransform1 = GetPointBarTransform(_pointTarget.Value, _teamPoints1);
            _teamPointBarTransform2 = GetPointBarTransform(_pointTarget.Value, _teamPoints2);

            //Console.WriteLine($"ScoreboardOverlay: updated bar graph transforms");
            //Console.WriteLine($"ScoreboardOverlay: _teamPointBarTransform1 = {_teamPointBarTransform1}");
            //Console.WriteLine($"ScoreboardOverlay: _teamPointBarTransform2 = {_teamPointBarTransform2}");
        }
        else
        {
            _shouldShowPointTarget = false;
        }
    }

    private int? GetCurrentRoundTeamPoints(int teamOrdinal, int currentRound)
    {
        var teamPoints = ScrimTeamsManager.GetTeamRoundScoreDisplay(teamOrdinal, currentRound);

        if (teamPoints.HasValue)
        {
            return teamPoints;
        }

        return ScrimTeamsManager.GetTeamCurrentRoundScoreDisplay(teamOrdinal);
    }

    private string GetPointBarTransform(int pointTarget, int teamPoints)
    {
        var scale = 0.0;

        if (pointTarget > 0)
        {
            scale = teamPoints * (double)1.0 / pointTarget;
        }

        if (scale > 1)
        {
            scale = 1;
        }

        if (scale < 0)
        {
            scale = 0;
        }

        return $"scaleX({scale})";
    }



    //private void UpdatePointsDisplay()
    //{
    //    if (_shouldShowPoints)
    //    {
    //        _teamPointsDisplay1 = _teamPoints1.ToString();
    //        _teamPointsDisplay2 = _teamPoints2.ToString();
    //    }
    //    else
    //    {
    //        //_teamPointsDisplay1 = "_";
    //        //_teamPointsDisplay2 = "_";
    //        _teamPointsDisplay1 = "";
    //        _teamPointsDisplay2 = "";
    //    }
    //}

    //private void UpdateShouldShowPoints()
    //{
    //    if (_matchState == MatchState.Uninitialized)
    //    {
    //        _shouldShowPoints = false;
    //    }
    //    else
    //    {
    //        _shouldShowPoints = true;
    //    }

    //    //UpdatePointsDisplay();
    //}

    private void UpdateTeamFactionDisplay(int teamOrdinal, string newAbbreviation)
    {
        if (string.IsNullOrWhiteSpace(newAbbreviation))
        {
            if (teamOrdinal == 1)
            {
                _teamFactionDisplay1[0] = ".";
                _teamFactionDisplay1[1] = ".";
            }
            else if (teamOrdinal == 2)
            {
                _teamFactionDisplay2[0] = ".";
                _teamFactionDisplay2[1] = ".";
            }
        }
        else
        {
            if (teamOrdinal == 1)
            {
                _teamFactionDisplay1[0] = newAbbreviation[0].ToString();
                _teamFactionDisplay1[1] = newAbbreviation[1].ToString();
            }
            else if (teamOrdinal == 2)
            {
                _teamFactionDisplay2[0] = newAbbreviation[0].ToString();
                _teamFactionDisplay2[1] = newAbbreviation[1].ToString();
            }
        }
    }

    private void UpdateTeamsControlCounts()
    {
        //_teamControls1 = 2; // ScrimTeamsManager.GetCurrentMatchRoundTeamWeightedCapturesCount(1);
        //_teamControls2 = 4; // ScrimTeamsManager.GetCurrentMatchRoundTeamWeightedCapturesCount(2);
        _teamControls1 = ScrimTeamsManager.GetCurrentMatchRoundTeamWeightedCapturesCount(1);
        _teamControls2 = ScrimTeamsManager.GetCurrentMatchRoundTeamWeightedCapturesCount(2);
    }

    private void UpdateSeriesMatchResults()
    {
        _teamSeriesResults1 = ScrimTeamsManager.GetTeamsScrimSeriesMatchResults(1);
        _teamSeriesResults2 = ScrimTeamsManager.GetTeamsScrimSeriesMatchResults(2);
    }

    #region Event Handling
    private void ReceiveTeamStatUpdateEvent(object sender, ScrimMessageEventArgs<TeamStatUpdateMessage> e)
    {
        var message = e.Message;

        var teamOrdinal = message.Team.TeamOrdinal;
        //var newPoints = message.Team.EventAggregate.Points;
        int? newPointsNullable; // _renderedCurrentRoundOnly ? message.Team.RoundEventAggregate.Points : message.Team.EventAggregate.Points;

        //var originalNewPoints = _renderedCurrentRoundOnly ? message.Team.RoundEventAggregate.Points : message.Team.EventAggregate.Points;
        //Console.WriteLine($"ScoreboardOverlay: original newPoints = {originalNewPoints}");

        if (_renderedCurrentRoundOnly)
        {
            _currentRound = ScrimMatchEngine.GetCurrentRound();

            //Console.WriteLine($"ScoreboardOverlay: _currentRound = {_currentRound}");

            //newPointsNullable = ScrimTeamsManager.GetTeamRoundScoreDisplay(teamOrdinal, _currentRound);
            //newPointsNullable = ScrimTeamsManager.GetTeamCurrentRoundScoreDisplay(teamOrdinal);
            newPointsNullable = GetCurrentRoundTeamPoints(teamOrdinal, _currentRound);
        }
        else
        {
            newPointsNullable = ScrimTeamsManager.GetTeamScoreDisplay(teamOrdinal);
        }

        var newPoints = (newPointsNullable == null) ? 0 : newPointsNullable.Value;

        //Console.WriteLine($"ScoreboardOverlay: newPointsNullable = {newPointsNullable}");
        //Console.WriteLine($"ScoreboardOverlay: new points for team {teamOrdinal} = {newPoints}");

        bool pointsChanged = false;

        if (teamOrdinal == 1 && newPoints != _teamPoints1)
        {
            _teamPoints1 = newPoints;
            pointsChanged = true;
        }
        else if (teamOrdinal == 2 && newPoints != _teamPoints2)
        {
            _teamPoints2 = newPoints;
            pointsChanged = true;
        }

        if (pointsChanged)
        {
            //UpdatePointsDisplay();
            _shouldShowPointTarget = ScrimMatchEngine.MatchConfiguration.EndRoundOnPointValueReached;
            var pointTarget = ScrimMatchEngine.MatchConfiguration.TargetPointValue;

            //Console.WriteLine($"ScoreboardOverlay: TargetPointValue = {pointTarget}");
            //Console.WriteLine($"ScoreboardOverlay: _shouldShowPointTarget = {_shouldShowPointTarget}");

            if (_shouldShowPointTarget && pointTarget.HasValue)
            {
                _pointTarget = pointTarget.Value;
                var newScale = GetPointBarTransform(_pointTarget.Value, newPoints);

                if (teamOrdinal == 1)
                {
                    _teamPointBarTransform1 = newScale;
                    //Console.WriteLine($"ScoreboardOverlay: _teamPointBarTransform1 = {_teamPointBarTransform1}");
                }
                else if (teamOrdinal == 2)
                {
                    _teamPointBarTransform2 = newScale;
                    //Console.WriteLine($"ScoreboardOverlay: _teamPointBarTransform2 = {_teamPointBarTransform2}");
                }
            }
            else
            {
                _shouldShowPointTarget = false;
            }

            //Console.WriteLine($"ScoreboardOverlay: Finished processing TeamStatUpdateMessage");

            InvokeAsyncStateHasChanged();
        }
    }

    private void ReceiveFacilityControlEvent(object sender, ScrimMessageEventArgs<ScrimFacilityControlActionEventMessage> e)
    {
        var message = e.Message;

        var controllingTeamOrdinal = message.FacilityControl.ControllingTeamOrdinal;

        if (controllingTeamOrdinal == 1)
        {
            var newTeamControls = ScrimTeamsManager.GetCurrentMatchRoundTeamWeightedCapturesCount(1);

            if (newTeamControls != _teamControls1)
            {
                _teamControls1 = newTeamControls;
                InvokeAsyncStateHasChanged();
            }

        }
        else if (controllingTeamOrdinal == 2)
        {
            var newTeamControls = ScrimTeamsManager.GetCurrentMatchRoundTeamWeightedCapturesCount(2);

            if (newTeamControls != _teamControls2)
            {
                _teamControls2 = newTeamControls;
                InvokeAsyncStateHasChanged();
            }
        }
    }

    private void ReceiveTeamAliasChangeEvent(object sender, ScrimMessageEventArgs<TeamAliasChangeMessage> e)
    {
        var message = e.Message;

        var teamOrdinal = message.TeamOrdinal;
        var newAlias = message.NewAlias;

        bool aliasChanged = false;

        if (teamOrdinal == 1 && newAlias != _teamAlias1)
        {
            _teamAlias1 = newAlias;
            aliasChanged = true;
        }
        else if (teamOrdinal == 2 && newAlias != _teamAlias2)
        {
            _teamAlias2 = newAlias;
            aliasChanged = true;
        }

        if (aliasChanged)
        {
            InvokeAsyncStateHasChanged();
        }
    }

    private void ReceiveMatchStateUpdateEvent(object sender, ScrimMessageEventArgs<MatchStateUpdateMessage> e)
    {
        var message = e.Message;

        var oldMatchState = _matchState;
        var newMatchState = message.MatchState;

        var oldCurrentRound = _currentRound;
        var newCurrentRound = message.CurrentRound;

        if (oldMatchState != newMatchState)
        {
            _matchState = newMatchState;

            SyncMatchAndTeamState();

            //UpdateShouldShowPoints();
            //UpdatePointsDisplay();

            //UpdateSeriesMatchResults();

            InvokeAsyncStateHasChanged();
        }

        if (oldCurrentRound != newCurrentRound)
        {
            _currentRound = newCurrentRound;

            SyncMatchAndTeamState();

            //UpdateTeamsControlCounts();

            InvokeAsyncStateHasChanged();
        }
    }



    private void ReceiveTeamFactionChangeEvent(object sender, ScrimMessageEventArgs<TeamFactionChangeMessage> e)
    {
        var message = e.Message;

        var teamOrdinal = message.TeamOrdinal;
        var newFactionId = message.NewFactionId;
        var newFactionAbbreviation = message.NewFactionAbbreviation;

        bool factionChanged = false;

        if (teamOrdinal == 1 && newFactionId != _teamFactionId1)
        {
            _teamFactionId1 = newFactionId;

            factionChanged = true;
        }
        else if (teamOrdinal == 2 && newFactionId != _teamFactionId2)
        {
            _teamFactionId2 = newFactionId;
            factionChanged = true;
        }

        if (factionChanged)
        {
            UpdateTeamFactionDisplay(teamOrdinal, newFactionAbbreviation);

            InvokeAsyncStateHasChanged();
        }
    }
    #endregion Event Handling

    private string GetSeriesMatchTallyCssClass(ScrimSeriesMatchResultType? matchResultType)
    {
        return matchResultType switch
        {
            ScrimSeriesMatchResultType.Win => "win",
            ScrimSeriesMatchResultType.Loss => "loss",
            ScrimSeriesMatchResultType.Draw => "loss",
            _ => "active"
        };
    }

    private bool ShouldShowActiveSeriesTally()
    {
        return _matchState switch
        {
            MatchState.Paused => true,
            MatchState.Running => true,
            MatchState.Stopped => false,
            MatchState.Uninitialized => false,
            _ => false
        };
    }

    private string GetShowPointTargetCssClass(bool showPointTarget)
    {
        if (showPointTarget)
        {
            return string.Empty;
        }

        return "hide";
    }

    private string GetSeriesTallyMarginString()
    {
        if (_shouldShowPointTarget)
        {
            return "margin-top: 6px";
        }
        else
        {
            return string.Empty;
        }
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
